{"version":3,"sources":["Board.js","Food.js","Game.js","Main.js","Menu.js","Score.js","Settings.js","Snake.js","Status.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxjKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACltHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"../app.js","sourcesContent":["class Board {\r\n    constructor() {\r\n        this.boardEl = document.getElementById('game');\r\n    }\r\n\r\n    /**\r\n     * Метод получает другие игровые объекты, которые нужны ему\r\n     * для работы.\r\n     * @param {Settings} settings объект настроек.\r\n     * @param {Snake} snake объект змейки.\r\n     */\r\n    init(settings, snake) {\r\n        this.settings = settings;\r\n        this.snake = snake;\r\n    }\r\n\r\n    /**\r\n     * Метод отрисовывает игровое поле.\r\n     */\r\n    renderBoard() {\r\n        this.boardEl.innerHTML = '';\r\n        for (let row = 0; row < this.settings.rowsCount; row++) {\r\n            let tr = document.createElement('tr');\r\n            this.boardEl.appendChild(tr);\r\n\r\n            for (let col = 0; col < this.settings.colsCount; col++) {\r\n                let td = document.createElement('td');\r\n                tr.appendChild(td);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Метод отрисовывает змейку на доске.\r\n     */\r\n    renderSnake() {\r\n        const snakeBodyElems = this.getSnakeBodyElems(this.snake.body);\r\n        if (snakeBodyElems) {\r\n            snakeBodyElems.forEach(function(tdEl) {\r\n                tdEl.classList.add('snakeBody');\r\n            })\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Метод очищает игровое поле.\r\n     */\r\n    clearBoard() {\r\n        const tdElems = document.querySelectorAll('td');\r\n        tdElems.forEach(function(td) {\r\n            td.className = \"\";\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Получаем ячейку таблицы.\r\n     * @param {number} x координата по оси х.\r\n     * @param {number} y координата по оси y.\r\n     * @returns {HTMLTableCellElement} тег td\r\n     */\r\n    getCellEl(x, y) {\r\n        return this.boardEl.querySelector(`tr:nth-child(${y}) td:nth-child(${x})`);\r\n    }\r\n\r\n    /**\r\n     * Получаем набор тегов td, представляющих тело змейки.\r\n     * @param {array} bodyCoords массив объектов с координатами\r\n     * @returns {HTMLTableCellElement[]|null} возвращается набор тегов td если были\r\n     * переданы координаты, иначе null.\r\n     */\r\n    getSnakeBodyElems(bodyCoords) {\r\n        if (bodyCoords.length > 0) {\r\n            let bodyElems = [];\r\n            for (let value of bodyCoords) {\r\n                let elem = this.getCellEl(value.x, value.y);\r\n                bodyElems.push(elem);\r\n            }\r\n            return bodyElems;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Является ли следующий шаг, шагом в стену.\r\n     * @param {Object} nextCellCoords - координаты ячейки, куда змейка собирается сделать шаг.\r\n     * @param {number} nextCellCoords.x\r\n     * @param {number} nextCellCoords.y\r\n     * @returns {boolean}\r\n     */\r\n    isNextStepToWall(nextCellCoords) {\r\n        let nextCell = this.getCellEl(nextCellCoords.x, nextCellCoords.y);\r\n        if (nextCell === null) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Метод рисует еду на игровом поле.\r\n     * @param {Object} coords будущее расположение еды на поле\r\n     * @param {number} coords.x координата x\r\n     * @param {number} coords.y координата y\r\n     */\r\n    renderFood(coords) {\r\n        const foodCell = this.getCellEl(coords.x, coords.y);\r\n        foodCell.classList.add('food');\r\n    }\r\n\r\n    /**\r\n     * Метод проверяет съела ли змейка еду.\r\n     * @returns {boolean} true если змейка находится на еде, иначе false.\r\n     */\r\n    isHeadOnFood() {\r\n        return this.boardEl.querySelector('.food').classList.contains('snakeBody');\r\n    }\r\n}","class Food {\r\n    constructor() {\r\n        this.x = null;\r\n        this.y = null;\r\n    }\r\n\r\n    /**\r\n     * Метод получает другие игровые объекты, которые нужны ему\r\n     * для работы.\r\n     * @param {Settings} settings объект настроек\r\n     * @param {Snake} snake объект змейки\r\n     * @param {Board} board объект игрового поля\r\n     */\r\n    init(settings, snake, board) {\r\n        this.settings = settings;\r\n        this.snake = snake;\r\n        this.board = board;\r\n    }\r\n\r\n    /**\r\n     * Метод устанавливает новое случайное положение еды на игровом\r\n     * поле.\r\n     */\r\n    setNewFood() {\r\n        const coords = this.generateRandomCoordinates();\r\n        this.board.renderFood(coords);\r\n    }\r\n\r\n    /**\r\n     * Метод устанавливает на игровом поле еду по текущим\r\n     * координатам.\r\n     */\r\n    setFood() {\r\n        this.board.renderFood(this);\r\n    }\r\n\r\n    /**\r\n     * Метод генерирует новый объект еды со случайным\r\n     * положением на игровом поле\r\n     * @returns {Food}\r\n     */\r\n    generateRandomCoordinates() {\r\n        while (true) {\r\n            this.x = Math.floor(Math.random() * this.settings.colsCount);\r\n            this.y = Math.floor(Math.random() * this.settings.rowsCount);\r\n            let cell = this.board.getCellEl(this.x, this.y);\r\n\r\n            if (cell === null) {\r\n                continue;\r\n            }\r\n            if (cell.classList.contains('snakeBody')) {\r\n                continue;\r\n            }\r\n            return this;\r\n        }\r\n    }\r\n}","class Game {\r\n    constructor() {\r\n        this.tickIdentifier = null;\r\n        this.messageEl = document.getElementById('message');\r\n    }\r\n\r\n    /** \r\n     * Метод получает другие игровые объекты, которые нужны ему\r\n     * для работы.\r\n     * @param {Settings} settings \r\n     * @param {Status} status\r\n     * @param {Board} board\r\n     * @param {Snake} snake\r\n     * @param {Menu} menu\r\n     * @param {Food} food\r\n     * @param {Score} score\r\n     */\r\n    init(settings, status, board, snake, menu, food, score) {\r\n        this.settings = settings;\r\n        this.status = status;\r\n        this.board = board;\r\n        this.snake = snake;\r\n        this.menu = menu;\r\n        this.food = food;\r\n        this.score = score;\r\n    }\r\n\r\n    /**\r\n     * Метод назначает обработчики на события клика на кнопки \"Старт\",\r\n     * \"Пауза\", а также на стрелки на клавиатуре.\r\n     */\r\n    run() {\r\n        this.score.setToWin(this.settings.winLength);\r\n        this.menu.addButtonsClickListeners(this.start.bind(this), this.pause.bind(this));\r\n        document.addEventListener('keydown', this.pressKeyHandler.bind(this));\r\n    }\r\n\r\n    /**\r\n     * Метод запускает игру.\r\n     */\r\n    start() {\r\n        if (this.status.isPaused()) {\r\n            this.status.setPlaying();\r\n            this.tickIdentifier = setInterval(this.doTick.bind(this), 1000 / this.settings.speed);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Метод ставит игру на паузу.\r\n     */\r\n    pause() {\r\n        if (this.status.isPlaying()) {\r\n            this.status.setPaused();\r\n            clearInterval(this.tickIdentifier);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Этот метод запускается каждую секунду и осуществляет:\r\n     * 1. перемещение змейки\r\n     * 2. проверяет проиграна/выиграна ли игра\r\n     * 3. увеличивает размер змейки если она ест еду\r\n     * 4. заново отрисовывает положение змейки и еды\r\n     */\r\n    doTick() {\r\n        this.snake.performStep();\r\n        this.score.setCurrent(this.snake.body.length);\r\n        if (this.isSnakeSteppedOntoItself()) {\r\n            return;\r\n        }\r\n        if (this.isGameWon()) {\r\n            return;\r\n        }\r\n        if (this.board.isHeadOnFood()) {\r\n            this.snake.increaseBody();\r\n            this.food.setNewFood();\r\n        }\r\n        this.board.clearBoard();\r\n        this.food.setFood();\r\n        this.board.renderSnake();\r\n    }\r\n\r\n    /**\r\n     * Метод проверяет выиграна ли игра, останавливает игру,\r\n     * выводит сообщение о выигрыше.\r\n     * @returns {boolean} если длина змейки достигла длины нужной\r\n     * для выигрыша, тогда true, иначе false.\r\n     */\r\n    isGameWon() {\r\n        if (this.snake.body.length == this.settings.winLength) {\r\n            clearInterval(this.tickIdentifier);\r\n            this.setMessage('Вы выиграли');\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Метод проверяет съела ли змейка сама себя.\r\n     * @returns {boolean}\r\n     */\r\n    isSnakeSteppedOntoItself() {\r\n        let cellArr = this.snake.body.map(function (cellCoords) {\r\n            return cellCoords.x.toString() + cellCoords.y.toString();\r\n        });\r\n        let head = cellArr.shift();\r\n        if (cellArr.includes(head)) {\r\n            clearInterval(this.tickIdentifier);\r\n            this.setMessage('Вы проиграли');\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @deprecated Метод больше не используется, т.к. теперь\r\n     * змейка может проходить через стены.\r\n     * \r\n     * Метод проверяет проиграна ли игра, останавливает игру\r\n     * в случае проигрыша, выводит сообщение о проигрыше.\r\n     * @returns {boolean} если мы шагнули в стену, тогда\r\n     * true, иначе false.\r\n     */\r\n    isGameLost() {\r\n        if (this.board.isNextStepToWall(this.snake.body[0])) {\r\n            clearInterval(this.tickIdentifier);\r\n            this.setMessage('Вы проиграли');\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * В зависимости от нажатой кнопки (вверх, вниз, влево, вправо) будет \r\n     * вызываться соответствующий метод.\r\n     * @param {KeyboardEvent} event \r\n     */\r\n    pressKeyHandler(event) {\r\n        switch (event.key) {\r\n            case \"ArrowUp\":\r\n                this.snake.changeDirection('up');\r\n                break;\r\n            case \"ArrowDown\":\r\n                this.snake.changeDirection('down');\r\n                break;\r\n            case \"ArrowLeft\":\r\n                this.snake.changeDirection('left');\r\n                break;\r\n            case \"ArrowRight\":\r\n                this.snake.changeDirection('right');\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Метод выводит сообщение на странице.\r\n     * @param {string} text \r\n     */\r\n    setMessage(text) {\r\n        this.messageEl.innerText = text;\r\n    }\r\n}","window.addEventListener('load', () => {\r\n    const settings = new Settings();\r\n    const status = new Status();\r\n    const snake = new Snake();\r\n    const board = new Board();\r\n    const menu = new Menu();\r\n    const food = new Food();\r\n    const game = new Game();\r\n    const score = new Score();\r\n    \r\n    settings.init({ speed: 5, winLength: 10 });\r\n    snake.init(settings);\r\n    board.init(settings, snake);\r\n    food.init(settings, snake, board);\r\n    game.init(settings, status, board, snake, menu, food, score);\r\n    score.init(settings);\r\n\r\n    board.renderBoard();\r\n    board.renderSnake(snake);\r\n\r\n    food.setNewFood();\r\n    game.run();\r\n});","class Menu {\r\n    constructor() {\r\n        this.startBtnEl = document.getElementById('startBtn');\r\n        this.pauseBtnEl = document.getElementById('pauseBtn');\r\n    }\r\n\r\n    /**\r\n     * Метод назначает переданные функции в качестве обработчиков\r\n     * событий клика на кнопки \"Старт\" и \"Пауза\".\r\n     * @param {Function} startBtnClickHandler \r\n     * @param {Function} pauseBtnClickHandler \r\n     */\r\n    addButtonsClickListeners(startBtnClickHandler, pauseBtnClickHandler) {\r\n        this.startBtnEl.addEventListener('click', startBtnClickHandler);\r\n        this.pauseBtnEl.addEventListener('click', pauseBtnClickHandler);\r\n    }\r\n}","class Score {\r\n    constructor() {\r\n        this.currentEl = document.querySelector('.current');\r\n        this.toWinEl = document.querySelector('.toWin');\r\n    }\r\n\r\n    /**\r\n     * @param {Settings} settings настройки игры\r\n     */\r\n    init(settings) {\r\n        this.settings = settings;\r\n    }\r\n\r\n    /**\r\n     * Метод устанавливает текущий счет игрока.\r\n     * @param {string} text \r\n     */\r\n    setCurrent(text) {\r\n        this.currentEl.textContent = text;\r\n    }\r\n\r\n    /**\r\n     * Метод устанавливает количество очков, необходимых\r\n     * для выигрыша.\r\n     * @param {string} text \r\n     */\r\n    setToWin(text) {\r\n        this.toWinEl.textContent = text;\r\n    }\r\n}","class Settings {\r\n    /**\r\n     * @param {Object} params - Парметры игры.\r\n     * @param {number} params.rowsCount - количество строк игрового поля.\r\n     * @param {number} params.colsCount - количество колонок игрового поля.\r\n     * @param {number} params.speed - скорость перемещения змейки.\r\n     * @param {number} params.winLength - какую длину надо наесть, чтобы выиграть.\r\n     * @throws {Error} если переданы не верные настройки выбрасывается\r\n     * соответствующая ошибка.\r\n     */\r\n    init(params) {\r\n        let defaultParams = {rowsCount: 21, colsCount: 21, speed: 2, winLength: 50};\r\n        Object.assign(defaultParams, params);\r\n\r\n        if (defaultParams.rowsCount < 10 || defaultParams.rowsCount > 30) {\r\n            throw new Error('Неверные настройки, значение rowsCount должно быть в диапазоне [10, 30].');\r\n        }\r\n        this.rowsCount = defaultParams.rowsCount;\r\n\r\n        if (defaultParams.colsCount < 10 || defaultParams.colsCount > 30) {\r\n            throw new Error('Неверные настройки, значение rowsCount должно быть в диапазоне [10, 30].');\r\n        }\r\n        this.colsCount = defaultParams.colsCount;\r\n\r\n        if (defaultParams.speed < 1 || defaultParams.speed > 10) {\r\n            throw new Error('Неверные настройки, значение speed должно быть в диапазоне [1, 10].');\r\n        }\r\n        this.speed = defaultParams.speed;\r\n\r\n        if (defaultParams.winLength < 5 || defaultParams.winLength > 50) {\r\n            throw new Error('Неверные настройки, значение winLength должно быть в диапазоне [5, 50].');\r\n        }\r\n        this.winLength = defaultParams.winLength;\r\n    }\r\n}","class Snake {\r\n    constructor() {\r\n        this.possibleDirections = ['down', 'up', 'left', 'right'];\r\n\r\n        this.body = [{\r\n            x: 1,\r\n            y: 1,\r\n        }];\r\n\r\n        this.direction = 'down';\r\n    }\r\n\r\n    /**\r\n     * @param {Settings} settings настройки игры\r\n     */\r\n    init(settings) {\r\n        this.settings = settings;\r\n    }\r\n\r\n    /**\r\n     * Меняем направление движения.\r\n     * @param {string} direction направление может быть down, up, left, right.\r\n     * @throws {Error} при передаче не корректного направления выбрасывается ошибка.\r\n     */\r\n    changeDirection(newDirection) {\r\n        if (!this.possibleDirections.includes(newDirection)) {\r\n            throw new Error('Передано не верное направление. Вы передали: ' + newDirection);\r\n        }\r\n        if (this.isPassedOppositeDirection(newDirection)) {\r\n            return;\r\n        }\r\n        this.direction = newDirection;\r\n    }\r\n\r\n    /**\r\n     * Метод проверяет, является ли переданное направление, противоположным\r\n     * тому куда сейчас движется змейка.\r\n     * @param {string} newDirection новое направление, может быть up, down, right, left.\r\n     * @returns {boolean} true если новое направление противоположно текущему,\r\n     * иначе false.\r\n     */\r\n    isPassedOppositeDirection(newDirection) {\r\n        if (this.direction == 'down' && newDirection == 'up') {\r\n            return true;\r\n        }\r\n        if (this.direction == 'up' && newDirection == 'down') {\r\n            return true;\r\n        }\r\n        if (this.direction == 'left' && newDirection == 'right') {\r\n            return true;\r\n        }\r\n        if (this.direction == 'right' && newDirection == 'left') {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Метод осуществляет шаг змейки. Добавляет ячейку перед существующим\r\n     * положением головы и удаляет одну ячейку в хвосте.\r\n     */\r\n    performStep() {\r\n        let currentHeadCoords = this.body[0];\r\n        let newHeadCoords = {\r\n            x: currentHeadCoords.x,\r\n            y: currentHeadCoords.y,\r\n        };\r\n        switch (this.direction) {\r\n            case \"down\":\r\n                newHeadCoords.y++;\r\n                break;\r\n            case \"up\":\r\n                newHeadCoords.y--;\r\n                break;\r\n            case \"left\":\r\n                newHeadCoords.x--;\r\n                break;\r\n            case \"right\":\r\n                newHeadCoords.x++;\r\n                break;\r\n        }\r\n\r\n        //если голова уходит за правый край\r\n        if (newHeadCoords.x > this.settings.colsCount) {\r\n            newHeadCoords.x = 1;\r\n        }\r\n        //если голова уходит за нижний край\r\n        if (newHeadCoords.y > this.settings.rowsCount) {\r\n            newHeadCoords.y = 1;\r\n        }\r\n        //если голова уходит за левый край\r\n        if (newHeadCoords.x == 0) {\r\n            newHeadCoords.x = this.settings.colsCount;\r\n        }\r\n        //если голова уходит за верхний край\r\n        if (newHeadCoords.y == 0) {\r\n            newHeadCoords.y = this.settings.rowsCount;\r\n        }\r\n\r\n        this.body.unshift(newHeadCoords);\r\n        this.body.pop();\r\n    }\r\n\r\n    /**\r\n     * Метод дублирует в массиве объектов представляющих тело змейки\r\n     * последнюю ячейку, т.е. в массиве в конце оказываются два\r\n     * одинаковых объекта. Когда метод performStep в самом конце\r\n     * удаляет последний элемент массива, он удаляет сдублированный\r\n     * объект, таким образом тело змейки растет.\r\n     */\r\n    increaseBody() {\r\n        let bodyLastCell = this.body[this.body.length - 1];\r\n        let newBodyLastCell = {\r\n            x: bodyLastCell.x,\r\n            y: bodyLastCell.y,\r\n        };\r\n        this.body.push(newBodyLastCell);\r\n    }\r\n}","/** Здесь будет хранится статус игры, например играем мы, завершили или остановлено. */\r\nclass Status {\r\n    constructor() {\r\n        this.setPaused();\r\n    }\r\n\r\n    /** Это значит что мы играем. */\r\n    setPlaying() {\r\n        this.condition = 'playing';\r\n    }\r\n\r\n    /** Это значит что игра на паузе. */\r\n    setPaused() {\r\n        this.condition = 'paused';\r\n    }\r\n\r\n    /**\r\n     * @returns {boolean} если мы сейчас играем, тогда true, иначе false.\r\n     */\r\n    isPlaying() {\r\n        return this.condition === 'playing';\r\n    }\r\n\r\n    /**\r\n     * @returns {boolean} если сейчас игра на паузе, тогда true, иначе false.\r\n     */\r\n    isPaused() {\r\n        return this.condition === 'paused';\r\n    }\r\n}"]}