{"version":3,"sources":["Board.js","Food.js","Game.js","Main.js","Menu.js","Settings.js","Snake.js","Status.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACthfile":"../app.js","sourcesContent":["class Board {\r\n    /**\r\n     * @param {Settings} settings объект настроек.\r\n     * @param {Snake} snake объект змейки.\r\n     */\r\n    constructor(settings, snake) {\r\n        this.settings = settings;\r\n        this.snake = snake;\r\n\r\n        this.boardEl = document.getElementById('game');\r\n    }\r\n\r\n    /**\r\n     * Метод отрисовывает игровое поле.\r\n     */\r\n    renderBoard() {\r\n        this.boardEl.innerHTML = '';\r\n        for (let row = 0; row < this.settings.rowsCount; row++) {\r\n            let tr = document.createElement('tr');\r\n            this.boardEl.appendChild(tr);\r\n\r\n            for (let col = 0; col < this.settings.colsCount; col++) {\r\n                let td = document.createElement('td');\r\n                tr.appendChild(td);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Метод отрисовывает змейку на доске.\r\n     */\r\n    renderSnake() {\r\n        const snakeHeadEl = this.getCellEl(this.snake.head.x, this.snake.head.y);\r\n        snakeHeadEl.classList.add('snakeHead');\r\n        const snakeBodyElems = this.getSnakeBodyElems(this.snake.body);\r\n        if (snakeBodyElems) {\r\n            snakeBodyElems.forEach(function(tdEl) {\r\n                tdEl.classList.add('snakeBody');\r\n            })\r\n        }\r\n    }\r\n\r\n    clearBoard() {\r\n        const tdElems = document.querySelectorAll('td');\r\n        tdElems.forEach(function(td) {\r\n            td.className = \"\";\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Получаем ячейку таблицы.\r\n     * @param {number} x координата по оси х.\r\n     * @param {number} y координата по оси y.\r\n     * @returns {HTMLTableCellElement} тег td\r\n     */\r\n    getCellEl(x, y) {\r\n        return this.boardEl.querySelector(`tr:nth-child(${y}) td:nth-child(${x})`);\r\n    }\r\n\r\n    /**\r\n     * Получаем набор тегов td, представляющих тело змейки.\r\n     * @param {array} bodyCoords массив объектов с координатами\r\n     * @returns {HTMLTableCellElement[]|null} возвращается набор тегов td если были\r\n     * переданы координаты, иначе null.\r\n     */\r\n    getSnakeBodyElems(bodyCoords) {\r\n        if (bodyCoords.length > 0) {\r\n            let bodyElems = [];\r\n            for (let value of bodyCoords) {\r\n                let elem = this.getCellEl(value.x, value.y);\r\n                bodyElems.push(elem);\r\n            }\r\n            return bodyElems;\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Является ли следующий шаг, шагом в стену.\r\n     * @param {Object} nextCellCoords - координаты ячейки, куда змейка собирается сделать шаг.\r\n     * @param {number} nextCellCoords.x\r\n     * @param {number} nextCellCoords.y\r\n     * @returns {Boolean}\r\n     */\r\n    isNextStepToWall(nextCellCoords) {\r\n        let nextCell = this.getCellEl(nextCellCoords.x, nextCellCoords.y);\r\n        if (nextCell === null) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    renderFood(coords) {\r\n        const foodCell = this.getCellEl(coords.x, coords.y);\r\n        foodCell.classList.add('food');\r\n    }\r\n\r\n    isHeadOnFood() {\r\n        return this.boardEl.querySelector('.snakeHead').classList.contains('food');\r\n    }\r\n}","class Food {\r\n    constructor(settings, snake, board) {\r\n        this.x = null;\r\n        this.y = null;\r\n\r\n        this.settings = settings;\r\n        this.snake = snake;\r\n        this.board = board;\r\n    }\r\n\r\n    init() {\r\n        this.setNewFood();\r\n    }\r\n\r\n    setNewFood() {\r\n        const coords = this.generateRandomCoordinates();\r\n        this.board.renderFood(coords);\r\n    }\r\n\r\n    setFood() {\r\n        this.board.renderFood(this);\r\n    }\r\n\r\n    generateRandomCoordinates() {\r\n        while (true) {\r\n            this.x = Math.floor(Math.random() * this.settings.colsCount);\r\n            this.y = Math.floor(Math.random() * this.settings.rowsCount);\r\n            let cell = this.board.getCellEl(this.x, this.y);\r\n\r\n            if (cell === null) {\r\n                continue;\r\n            }\r\n            if (cell.classList.contains('snakeHead') || cell.classList.contains('snakeBody')) {\r\n                continue;\r\n            }\r\n            return this;\r\n        }\r\n    }\r\n}","class Game {\r\n    /**\r\n     * @param {Settings} settings \r\n     * @param {Status} status\r\n     * @param {Board} board\r\n     * @param {Snake} snake\r\n     * @param {Menu} menu\r\n     * @param {Food} food\r\n     */\r\n    constructor(settings, status, board, snake, menu, food) {\r\n        this.settings = settings;\r\n        this.status = status;\r\n        this.board = board;\r\n        this.snake = snake;\r\n        this.menu = menu;\r\n        this.food = food;\r\n\r\n        this.tickIdentifier = null;\r\n        this.messageEl = document.getElementById('message');\r\n    }\r\n\r\n    init() {\r\n        this.board.renderBoard();\r\n        this.board.renderSnake();\r\n        this.menu.addButtonsClickListeners(this.start.bind(this), this.pause.bind(this), this.newGame.bind(this));\r\n        document.addEventListener('keydown', this.pressKeyHandler.bind(this));\r\n    }\r\n\r\n    start() {\r\n        if (this.status.isPaused()) {\r\n            this.status.setPlaying();\r\n            this.tickIdentifier = setInterval(this.doTick.bind(this), 1000 / this.settings.speed);\r\n        }\r\n    }\r\n\r\n    pause() {\r\n        if (this.status.isPlaying()) {\r\n            this.status.setPaused();\r\n            clearInterval(this.tickIdentifier);\r\n        }\r\n    }\r\n\r\n    newGame() {\r\n        console.log('new game');\r\n    }\r\n\r\n    doTick() {\r\n        this.snake.changeHeadCoords();\r\n        if (this.isGameLost()) {\r\n            return;\r\n        }\r\n        if (this.board.isHeadOnFood()) {\r\n            // this.snake.increaseBody();\r\n            this.food.setNewFood();\r\n        }\r\n        // this.snake.changeBodyCoords();\r\n        this.board.clearBoard();\r\n        this.food.setFood();\r\n        this.board.renderSnake();\r\n    }\r\n\r\n    isGameLost() {\r\n        if (this.board.isNextStepToWall(this.snake.head)) {\r\n            clearInterval(this.tickIdentifier);\r\n            this.setMessage('Вы проиграли');\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * В зависимости от нажатой кнопки (вверх, вниз, влево, вправо) будет вызываться соответствующий метод.\r\n     * @param {KeyboardEvent} event \r\n     */\r\n    pressKeyHandler(event) {\r\n        switch (event.key) {\r\n            case \"ArrowUp\":\r\n                this.snake.changeDirection('up');\r\n                break;\r\n            case \"ArrowDown\":\r\n                this.snake.changeDirection('down');\r\n                break;\r\n            case \"ArrowLeft\":\r\n                this.snake.changeDirection('left');\r\n                break;\r\n            case \"ArrowRight\":\r\n                this.snake.changeDirection('right');\r\n                break;\r\n        }\r\n    }\r\n\r\n    setMessage(text) {\r\n        this.messageEl.innerText = text;\r\n    }\r\n}","window.addEventListener('load', () => {\r\n    const settings = new Settings({ speed: 5, winLength: 5 });\r\n    const status = new Status();\r\n    const snake = new Snake();\r\n    const board = new Board(settings, snake);\r\n    const menu = new Menu();\r\n    const food = new Food(settings, snake, board);\r\n    const game = new Game(settings, status, board, snake, menu, food);\r\n    game.init();\r\n    food.init();\r\n    // board.renderSnake(snake);\r\n    // console.dir(status);\r\n});","class Menu {\r\n    constructor() {\r\n        this.startBtnEl = document.getElementById('startBtn');\r\n        this.pauseBtnEl = document.getElementById('pauseBtn');\r\n    }\r\n\r\n    addButtonsClickListeners(startBtnClickHandler, pauseBtnClickHandler, newGameBtnClickHandler) {\r\n        this.startBtnEl.addEventListener('click', startBtnClickHandler);\r\n        this.pauseBtnEl.addEventListener('click', pauseBtnClickHandler);\r\n    }\r\n}","class Settings {\r\n    /**\r\n     * @param {Object} params - Парметры игры.\r\n     * @param {number} params.rowsCount - количество строк игрового поля.\r\n     * @param {number} params.colsCount - количество колонок игрового поля.\r\n     * @param {number} params.speed - скорость перемещения змейки.\r\n     * @param {number} params.winLength - какую длину надо наесть, чтобы выиграть.\r\n     */\r\n    constructor(params) {\r\n        let defaultParams = {rowsCount: 21, colsCount: 21, speed: 2, winLength: 50};\r\n        Object.assign(defaultParams, params);\r\n\r\n        if (defaultParams.rowsCount < 10 || defaultParams.rowsCount > 30) {\r\n            throw new Error('Неверные настройки, значение rowsCount должно быть в диапазоне [10, 30].');\r\n        }\r\n        this.rowsCount = defaultParams.rowsCount;\r\n\r\n        if (defaultParams.colsCount < 10 || defaultParams.colsCount > 30) {\r\n            throw new Error('Неверные настройки, значение rowsCount должно быть в диапазоне [10, 30].');\r\n        }\r\n        this.colsCount = defaultParams.colsCount;\r\n\r\n        if (defaultParams.speed < 1 || defaultParams.speed > 10) {\r\n            throw new Error('Неверные настройки, значение speed должно быть в диапазоне [1, 10].');\r\n        }\r\n        this.speed = defaultParams.speed;\r\n\r\n        if (defaultParams.winLength < 5 || defaultParams.winLength > 50) {\r\n            throw new Error('Неверные настройки, значение winLength должно быть в диапазоне [5, 50].');\r\n        }\r\n        this.winLength = defaultParams.winLength;\r\n    }\r\n}","class Snake {\r\n    constructor() {\r\n        this.possibleDirections = ['down', 'up', 'left', 'right'];\r\n\r\n        this.head = {\r\n            x: 1,\r\n            y: 1,\r\n        };\r\n        this.body = [];\r\n\r\n        this.direction = 'down';\r\n    }\r\n\r\n    /**\r\n     * Меняем направление движения.\r\n     * @param {string} direction направление может быть down, up, left, right.\r\n     * @throws {Error} при передаче не корректного направления выбрасывается ошибка.\r\n     */\r\n    changeDirection(newDirection) {\r\n        if (!this.possibleDirections.includes(newDirection)) {\r\n            throw new Error('Передано не верное направление. Вы передали: ' + newDirection);\r\n        }\r\n        if (this.isPassedOppositeDirection(newDirection)) {\r\n            return;\r\n        }\r\n        this.direction = newDirection;\r\n    }\r\n\r\n    isPassedOppositeDirection(newDirection) {\r\n        if (this.direction == 'down' && newDirection == 'up') {\r\n            return true;\r\n        }\r\n        if (this.direction == 'up' && newDirection == 'down') {\r\n            return true;\r\n        }\r\n        if (this.direction == 'left' && newDirection == 'right') {\r\n            return true;\r\n        }\r\n        if (this.direction == 'right' && newDirection == 'left') {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    changeHeadCoords() {\r\n        switch (this.direction) {\r\n            case \"down\":\r\n                this.head.y++;\r\n                break;\r\n            case \"up\":\r\n                this.head.y--;\r\n                break;\r\n            case \"left\":\r\n                this.head.x--;\r\n                break;\r\n            case \"right\":\r\n                this.head.x++;\r\n                break;\r\n        }\r\n    }\r\n\r\n    changeBodyCoords() {\r\n        for (let bodyCell of this.body) {\r\n            switch (this.direction) {\r\n                case \"down\":\r\n                    bodyCell.y++;\r\n                    break;\r\n                case \"up\":\r\n                    bodyCell.y--;\r\n                    break;\r\n                case \"left\":\r\n                    bodyCell.x--;\r\n                    break;\r\n                case \"right\":\r\n                    bodyCell.x++;\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    increaseBody() {\r\n        console.log('increase body');\r\n        let lastHeadPosition = {}\r\n        Object.assign(lastHeadPosition, this.head);\r\n        \r\n        if (this.body.length == 0) {\r\n            switch (this.direction) {\r\n                case \"down\":\r\n                    lastHeadPosition.y = this.head.y - 1;\r\n                    break;\r\n                case \"up\":\r\n                    lastHeadPosition.y = this.head.y + 1;\r\n                    break;\r\n                case \"left\":\r\n                    lastHeadPosition.x = this.head.x + 1;\r\n                    break;\r\n                case \"right\":\r\n                    lastHeadPosition.x = this.head.x - 1;\r\n                    break;\r\n            }\r\n            console.log(lastHeadPosition);\r\n            throw \"1\";\r\n            this.body.push(lastHeadPosition);\r\n        }\r\n        console.log(this.body);\r\n        throw \"ew\";\r\n    }\r\n}","/** Здесь будет хранится статус игры, например играем мы, завершили или остановлено. */\r\nclass Status {\r\n    constructor() {\r\n        this.setPaused();\r\n    }\r\n\r\n    /** Это значит что мы играем. */\r\n    setPlaying() {\r\n        this.condition = 'playing';\r\n    }\r\n\r\n    /** Это значит что игра на паузе. */\r\n    setPaused() {\r\n        this.condition = 'paused';\r\n    }\r\n\r\n    /** Это значит что игра завершена. */\r\n    setFinished() {\r\n        this.condition = 'finished';\r\n    }\r\n\r\n    /**\r\n     * @returns {Boolean} если мы сейчас играем, тогда true, иначе false.\r\n     */\r\n    isPlaying() {\r\n        return this.condition === 'playing';\r\n    }\r\n\r\n    /**\r\n     * @returns {Boolean} если сейчас игра на паузе, тогда true, иначе false.\r\n     */\r\n    isPaused() {\r\n        return this.condition === 'paused';\r\n    }\r\n}"]}